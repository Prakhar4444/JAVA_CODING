import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the compareTriplets function below.
    static List<Integer> compareTriplets(List<Integer> a, List<Integer> b) 
    {
        int[] array1 = new int[2];
        int[] array2 = new int[a.size()];
        int[] array3 = new int[b.size()];
        int i;
        for(i=0;i<array2.length;i++)
        {
            array2[i]=a.get(i);
        }
        for(i=0;i<array3.length;i++)
        {
            array3[i]=b.get(i);
        }
        for(i=0;i<array2.length;i++)
        {
            if(array2[i]>array3[i])
            {
                array1[0]=array1[0]+1;
            }
            else if(array2[i]<array3[i])
            {
                array1[1]=array1[1]+1;
            }
            else if(array2[i]==array3[i])
            {
                continue;
            }
        }
        List<Integer> List = new ArrayList<>(array1.length);
        for( int j : array1)
        {
            List.add(Integer.valueOf(j));
        }
        return List;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> b = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = compareTriplets(a, b);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
